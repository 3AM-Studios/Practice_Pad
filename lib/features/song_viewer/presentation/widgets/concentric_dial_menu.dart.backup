import 'dart:math';
import 'package:flutter/material.dart';

// Represents an item on the dial. (No changes needed here)
class DialItem {
  final IconData? icon;
  final String label;
  final String? outerText; // Optional text to display on the outer edge of buttons

  DialItem({this.icon, required this.label, this.outerText});
}

// MODIFIED: Now accepts a size property
class ConcentricDialMenu extends StatefulWidget {
  final double size; // <- ADDED: To control the widget's size
  final List<DialItem> outerItems;
  final List<DialItem> innerItems;
  final Function(int? innerIndex, int? outerIndex) onSelectionChanged;
  final Function(int? innerIndex, int? outerIndex)? onSwipeDetected; // <- ADDED: Swipe callback
  final String? centerText; // <- ADDED: Optional text in the center
  final int? highlightedOuterIndex; // <- ADDED: To highlight a specific outer item
  final int? highlightedInnerIndex; // <- ADDED: To highlight a specific inner item

  const ConcentricDialMenu({
    super.key,
    required this.outerItems,
    required this.innerItems,
    required this.onSelectionChanged,
    this.onSwipeDetected, // <- ADDED: Optional swipe callback
    this.centerText, // <- ADDED: Optional center text
    this.size = 300, // <- ADDED: Default size
    this.highlightedOuterIndex, // <- ADDED: Optional highlighting
    this.highlightedInnerIndex, // <- ADDED: Optional highlighting
  });

  @override
  State<ConcentricDialMenu> createState() => _ConcentricDialMenuState();
}

class _ConcentricDialMenuState extends State<ConcentricDialMenu> {
  int? _selectedOuterIndex;
  int? _selectedInnerIndex;
  Offset? _panStartPosition;
  int? _panStartOuterIndex;
  int? _panStartInnerIndex;

  @override
  Widget build(BuildContext context) {
    // WRAPPED in a SizedBox to enforce the size from the constructor
    return SizedBox(
      width: widget.size,
      height: widget.size,
      child: GestureDetector(
        onTapDown: (details) {
          final result = _getIndexFromPosition(details.localPosition);
          setState(() {
            _selectedOuterIndex = result['outerIndex'];
            _selectedInnerIndex = result['innerIndex'];
            widget.onSelectionChanged(_selectedInnerIndex, _selectedOuterIndex);
          });
        },
        onPanStart: (details) {
          _panStartPosition = details.localPosition;
          final result = _getIndexFromPosition(details.localPosition);
          _panStartOuterIndex = result['outerIndex'];
          _panStartInnerIndex = result['innerIndex'];
        },
        onPanEnd: (details) {
          if (_panStartPosition != null && widget.onSwipeDetected != null) {
            final velocity = details.velocity.pixelsPerSecond;
            final distance = velocity.distance;
            
            // Detect swipe if velocity is above threshold
            if (distance > 500) {
              widget.onSwipeDetected!(_panStartInnerIndex, _panStartOuterIndex);
            }
          }
          _panStartPosition = null;
          _panStartOuterIndex = null;
          _panStartInnerIndex = null;
        },
        child: CustomPaint(
          size: Size(widget.size, widget.size), // Use the widget's size
          painter: _DialPainter(
            outerItems: widget.outerItems,
            innerItems: widget.innerItems,
            selectedOuterIndex: _selectedOuterIndex,
            selectedInnerIndex: _selectedInnerIndex,
            centerText: widget.centerText,
          ),
        ),
      ),
    );
  }

  Map<String, int?> _getIndexFromPosition(Offset position) {
    final center = Offset(widget.size / 2, widget.size / 2);
    final dx = position.dx - center.dx;
    final dy = position.dy - center.dy;

    final distance = sqrt(dx * dx + dy * dy);
    final angle = atan2(dy, dx);

    // Radii are now based on the widget's size property
    final outerRadius = widget.size / 2 * 0.9;
    final innerRadius = widget.size / 2 * 0.6;

    int? outerIndex;
    int? innerIndex;

    // Check outer ring
    if (distance > innerRadius && distance < outerRadius) {
      final anglePerItem = 2 * pi / widget.outerItems.length;
      outerIndex = (((angle + pi + anglePerItem / 2) / anglePerItem) % widget.outerItems.length).toInt();
    }
    // Check inner ring
    else if (distance > 0 && distance < innerRadius * 0.8) {
      final anglePerItem = 2 * pi / widget.innerItems.length;
      innerIndex = (((angle + pi + anglePerItem / 2) / anglePerItem) % widget.innerItems.length).toInt();
    }

    return {'outerIndex': outerIndex, 'innerIndex': innerIndex};
  }
}

// _DialPainter remains mostly the same, as its 'size' argument
// is passed from the CustomPaint widget.
class _DialPainter extends CustomPainter {
  final List<DialItem> outerItems;
  final List<DialItem> innerItems;
  final int? selectedOuterIndex;
  final int? selectedInnerIndex;
  final String? centerText;

  _DialPainter({
    required this.outerItems,
    required this.innerItems,
    this.selectedOuterIndex,
    this.selectedInnerIndex,
    this.centerText,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final outerRadius = size.width / 2 * 0.8;
    final innerRadius = size.width / 2 * 0.5;
    final buttonRadius = size.width / 2 * 0.15;

    _drawRing(canvas, center, outerRadius, outerItems, selectedOuterIndex, buttonRadius, true);
    _drawRing(canvas, center, innerRadius, innerItems, selectedInnerIndex, buttonRadius, false);
    
    // Draw center text if provided
    if (centerText != null && centerText!.isNotEmpty) {
      _drawCenterText(canvas, center, centerText!);
    }
  }

  void _drawCenterText(Canvas canvas, Offset center, String text) {
    final textPainter = TextPainter(
      textDirection: TextDirection.ltr,
      text: TextSpan(
        text: text,
        style: const TextStyle(
          color: Colors.black,
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
    textPainter.layout();
    textPainter.paint(
      canvas,
      Offset(
        center.dx - textPainter.width / 2,
        center.dy - textPainter.height / 2,
      ),
    );
  }

  void _drawRing(Canvas canvas, Offset center, double ringRadius, List<DialItem> items, int? selectedIndex, double buttonRadius, bool isOuterRing) {
  void _drawRing(Canvas canvas, Offset center, double ringRadius, List<DialItem> items, int? selectedIndex, double buttonRadius, bool isOuterRing) {
    final anglePerItem = 2 * pi / items.length;
    
    for (int i = 0; i < items.length; i++) {
      final angle = i * anglePerItem - pi / 2; // Start from the top
      final itemCenter = Offset(
        center.dx + ringRadius * cos(angle),
        center.dy + ringRadius * sin(angle),
      );

      final paint = Paint()
        ..color = (i == selectedIndex) ? Colors.blueAccent : Colors.grey.shade300
        ..style = PaintingStyle.fill;
      
      canvas.drawCircle(itemCenter, buttonRadius, paint);
      
      // Only draw icon if it exists
      if (items[i].icon != null) {
        TextPainter iconPainter = TextPainter(
          textDirection: TextDirection.ltr,
          text: TextSpan(
            text: String.fromCharCode(items[i].icon!.codePoint),
            style: TextStyle(
              color: (i == selectedIndex) ? Colors.white : Colors.black,
              fontSize: buttonRadius * 0.8,
              fontFamily: items[i].icon!.fontFamily,
              package: items[i].icon!.fontPackage,
            ),
          ),
        );
        iconPainter.layout();
        iconPainter.paint(
          canvas, 
          Offset(
            itemCenter.dx - iconPainter.width / 2,
            itemCenter.dy - iconPainter.height / 2,
          ),
        );
      } else {
        // Draw text label instead of icon
        TextPainter labelPainter = TextPainter(
          textDirection: TextDirection.ltr,
          text: TextSpan(
            text: items[i].label,
            style: TextStyle(
              color: (i == selectedIndex) ? Colors.white : Colors.black,
              fontSize: buttonRadius * 0.3,
              fontWeight: FontWeight.bold,
            ),
          ),
        );
        labelPainter.layout();
        labelPainter.paint(
          canvas, 
          Offset(
            itemCenter.dx - labelPainter.width / 2,
            itemCenter.dy - labelPainter.height / 2,
          ),
        );
      }
      
      // Draw outer text if this is the outer ring and outer text is provided
      if (isOuterRing && items[i].outerText != null && items[i].outerText!.isNotEmpty) {
        final outerTextRadius = ringRadius + buttonRadius + 10; // Position outside the button
        final outerTextCenter = Offset(
          center.dx + outerTextRadius * cos(angle),
          center.dy + outerTextRadius * sin(angle),
        );
        
        TextPainter outerTextPainter = TextPainter(
          textDirection: TextDirection.ltr,
          text: TextSpan(
            text: items[i].outerText!,
            style: const TextStyle(
              color: Colors.black,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
        );
        outerTextPainter.layout();
        outerTextPainter.paint(
          canvas,
          Offset(
            outerTextCenter.dx - outerTextPainter.width / 2,
            outerTextCenter.dy - outerTextPainter.height / 2,
          ),
        );
      }
    }
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }
}